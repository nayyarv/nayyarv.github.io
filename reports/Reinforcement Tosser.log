Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.10.5/x64/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
## support code - this is not well documented and pulled from some prior work in this space
## Will move to a library eventually
import numpy as np
from sortedcontainers import SortedList

def medianFromSorted(slist):
    if len(slist) % 2 == 1:
        return slist[len(slist)//2]
    else:
        i1 = len(slist)//2
        i2 = i1-1
        return (slist[i1] + slist[i2])/2
        

class QDynamicTable:
    
    def __init__(self, nA=4, nS=None):
        from collections import defaultdict
        self.num_actions = nA
        self.Q = defaultdict(lambda: [SortedList() for i in range(nA)])

    def get_Q(self, s, a):
        """Q(s, a): get the Q value of (s, a) pair"""
        if self.Q[s][a]:
            return medianFromSorted(self.Q[s][a])
        return 0

    def get_max(self, s):
        """max Q(s): get the max of all Q value of state s"""
        return max(self.get_Q(s, a) for a in range(self.num_actions))

    def set_Q(self, s, a, q):
        """Q(s, a) = q: update the q value of (s, a) pair"""
        self.Q[s][a].add(q)

    def get_max_a(self, s):
        """argmax_a Q(s, a): get the action which has the highest Q in state s"""
        mx = self.get_max(s)
        for a in range(self.num_actions):
            if self.get_Q(s, a) == mx:
                return a
        return random.randint(0, self.num_actions)
            
    def __str__(self):
        output = []
        for s in self.Q:
            output.append(s.__str__() + ": " + ["{:07.4f}".format(self.get_Q(s, a) or 0) for a in range(self.num_actions)].__str__())
        output.sort()
        return "QTable (number of actions = " + str(self.num_actions) + ", states = " + str(
            len(output)) + "):\n" + "\n".join(output)


    
class Epsilon:
    """
    Gratuitous class for the epsilon greedy part of reinforcement learning.
    """
    def __init__(self, start=1.0, end=0.01, update_decrement=0.01):
        self.start = start
        self.end = end
        self.update_decrement = update_decrement
        self._value = self.start
        self.isTraining = True

    def decrement(self, count=1):
        self._value = max(self.end, self._value - self.update_decrement * count)
        return self

    @property
    def value(self):
        if self.isTraining:
            return self._value
        else:
            # always explore
            return 0

    @value.setter
    def value(self, val):
        self._value = val


    
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Input [0;32mIn [2][0m, in [0;36m<cell line: 4>[0;34m()[0m
[1;32m      1[0m [38;5;66;03m## support code - this is not well documented and pulled from some prior work in this space[39;00m
[1;32m      2[0m [38;5;66;03m## Will move to a library eventually[39;00m
[1;32m      3[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[0;32m----> 4[0m [38;5;28;01mfrom[39;00m [38;5;21;01msortedcontainers[39;00m [38;5;28;01mimport[39;00m SortedList
[1;32m      6[0m [38;5;28;01mdef[39;00m [38;5;21mmedianFromSorted[39m(slist):
[1;32m      7[0m     [38;5;28;01mif[39;00m [38;5;28mlen[39m(slist) [38;5;241m%[39m [38;5;241m2[39m [38;5;241m==[39m [38;5;241m1[39m:

[0;31mModuleNotFoundError[0m: No module named 'sortedcontainers'
ModuleNotFoundError: No module named 'sortedcontainers'

